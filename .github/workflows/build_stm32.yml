name: Build STM32

on:
  workflow_call:
    inputs:
      board:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache PlatformIO dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            .pio
          key: ${{ runner.os }}-pio-stm32-${{ inputs.board }}-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-stm32-${{ inputs.board }}-
            ${{ runner.os }}-pio-stm32-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Build firmware
        run: |
          platformio run -e ${{ inputs.board }}
          mkdir -p artifacts
          # Copy binary and ELF files
          cp .pio/build/${{ inputs.board }}/*.bin artifacts/ || true
          cp .pio/build/${{ inputs.board }}/*.elf artifacts/ || true
          # Copy bootloader if it exists
          cp .pio/build/${{ inputs.board }}/bootloader*.bin artifacts/ || true
          # Copy littlefs image if it exists
          cp .pio/build/${{ inputs.board }}/littlefs*.bin artifacts/ || true

      - name: Memory usage analysis
        run: |
          echo "Memory usage analysis for ${{ inputs.board }}"
          platformio run --target size -e ${{ inputs.board }}
          
          # Extract memory information from the build
          SIZE_OUTPUT=$(arm-none-eabi-size .pio/build/${{ inputs.board }}/*.elf)
          echo "Detailed size information:"
          echo "$SIZE_OUTPUT"
          
          # Parse and display memory usage percentages
          TEXT=$(echo "$SIZE_OUTPUT" | tail -n1 | awk '{print $1}')
          DATA=$(echo "$SIZE_OUTPUT" | tail -n1 | awk '{print $2}')
          BSS=$(echo "$SIZE_OUTPUT" | tail -n1 | awk '{print $3}')
          
          echo "Text (Flash) size: $TEXT bytes"
          echo "Data size: $DATA bytes"
          echo "BSS size: $BSS bytes"
          echo "Total RAM used: $((DATA + BSS)) bytes"

      - name: Get version info
        id: version
        run: echo "long=$(./bin/buildinfo.py long)" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-stm32-${{ inputs.board }}-${{ steps.version.outputs.long }}
          path: artifacts/
          retention-days: 30
          if-no-files-found: error

      - name: Upload memory analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: memory-analysis-stm32-${{ inputs.board }}-${{ steps.version.outputs.long }}
          path: |
            .pio/build/${{ inputs.board }}/*.map
          retention-days: 30
          if-no-files-found: warn
